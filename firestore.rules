rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is updating their own data
    function isUpdatingOwnData() {
      return isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Helper function to validate user data
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'displayName', 'uid']) &&
             request.resource.data.uid == request.auth.uid;
    }

    // Helper function to validate user data updates (excluding subscription fields)
    function isValidUserDataUpdate() {
      let allowedFields = ['email', 'displayName', 'preferences', 'updatedAt'];
      let hasOnlyAllowedFields = request.resource.data.keys().hasOnly(
        resource.data.keys().union(allowedFields.toSet())
      );

      // Prevent client-side updates to subscription fields
      let subscriptionFieldsUnchanged = !request.resource.data.keys().hasAny(['subscription']);

      return hasOnlyAllowedFields && subscriptionFieldsUnchanged &&
             request.resource.data.uid == request.auth.uid;
    }

    // Helper function to validate prompt data
    function isValidPromptData() {
      return request.resource.data.keys().hasAll(['title', 'originalPrompt', 'enhancedPrompt', 'technique', 'format', 'userId']) &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.title.size() <= 200;
    }

    // Users collection rules
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);

      // Users can create their own profile during signup
      allow create: if isOwner(userId) && isValidUserData();

      // Users can update their own profile (excluding subscription fields)
      allow update: if isOwner(userId) && isValidUserDataUpdate();

      // Users cannot delete their profile directly (use Cloud Functions for proper cleanup)
      allow delete: if false;
    }

    // Prompts collection rules
    match /prompts/{promptId} {
      // Users can read their own prompts
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Users can read public prompts (future feature)
      allow read: if resource.data.isPublic == true;

      // Users can create prompts with valid data
      allow create: if isAuthenticated() && isValidPromptData();

      // Users can update their own prompts
      allow update: if isUpdatingOwnData() && isValidPromptData();

      // Users can delete their own prompts
      allow delete: if isUpdatingOwnData();
    }

    // Enhancement history collection rules
    match /enhancement_results/{resultId} {
      // Users can read their own enhancement history
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Users can create enhancement history entries
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['original', 'enhanced', 'technique', 'format', 'userId']);

      // Enhancement history is immutable (no updates)
      allow update: if false;

      // Users can delete their own enhancement history
      allow delete: if isUpdatingOwnData();
    }

    // Subscription management (server-side only)
    match /subscriptions/{subscriptionId} {
      // Users can read their own subscription data
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Subscription data is managed by server-side code only (webhooks, admin functions)
      allow write: if false;
    }

    // Usage statistics collection (future feature)
    match /usage_stats/{statId} {
      // Only the user can read their own usage statistics
      allow read: if isOwner(resource.data.userId);

      // Usage stats are managed by Cloud Functions only
      allow write: if false;
    }

    // Public prompts collection (future feature for sharing)
    match /public_prompts/{promptId} {
      // Anyone can read public prompts
      allow read: if true;

      // Only authenticated users can create public prompts
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.isPublic == true;

      // Users can update their own public prompts
      allow update: if isUpdatingOwnData();

      // Users can delete their own public prompts
      allow delete: if isUpdatingOwnData();
    }

    // Admin collection (future feature)
    match /admins/{adminId} {
      // Only admins can read admin data
      allow read: if isAuthenticated() &&
                    exists(/databases/$(database)/documents/admins/$(request.auth.uid));

      // Admin data is managed externally
      allow write: if false;
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}